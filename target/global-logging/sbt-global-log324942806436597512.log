[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\DELL\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\DELL\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.7.0 (Oracle Corporation Java 1.8.0_333)
[debug]       Load.loadUnit: plugins took 112.8688ms
[debug]       Load.loadUnit: defsScala took 0.3303ms
[debug] [Loading] Scanning directory C:\Users\DELL\.sbt\1.0\plugins
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\DELL\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 19.9583 ms
[debug]           Load.resolveProject(global-plugins) took 59.7504ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\DELL\.sbt\1.0\plugins, plugins: List(<none>))) took 109.1968ms
[debug] [Loading] Done in C:\Users\DELL\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 135.5825ms
[debug]       Load.loadUnit: cleanEvalClasses took 0.4381ms
[debug]     Load.loadUnit(file:/C:/Users/DELL/.sbt/1.0/plugins/, ...) took 257.8584ms
[debug]   Load.apply: load took 607.6673ms
[debug]   Load.apply: resolveProjects took 25.9052ms
[debug]   Load.apply: finalTransforms took 165.1632ms
[debug]   Load.apply: config.delegates took 9.0526ms
[debug]   Load.apply: Def.make(settings)... took 537.0159ms
[debug]   Load.apply: structureIndex took 141.6046ms
[debug]   Load.apply: mkStreams took 2.0126ms
[info] loading global plugins from C:\Users\DELL\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 3246.8014ms
[debug]           Load.loadUnit: plugins took 29.8348ms
[debug]           Load.loadUnit: defsScala took 0.0051ms
[debug] [Loading] Scanning directory C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline\project
[debug]             Load.loadUnit: mkEval took 9.5476ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 3.4567 ms
[info] loading settings for project clickstream-data-pipeline-build from idea.sbt ...
[debug]               Load.resolveProject(clickstream-data-pipeline-build) took 5.2222ms
[debug]             Load.loadTransitive: finalizeProject(Project(id clickstream-data-pipeline-build, base: C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline\project, plugins: List(<none>))) took 9.7364ms
[debug] [Loading] Done in C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline\project, returning: (clickstream-data-pipeline-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 233.7926ms
[debug]           Load.loadUnit: cleanEvalClasses took 9.6501ms
[debug]         Load.loadUnit(file:/C:/Users/DELL/Desktop/sparkAssignment/de/clickstream-data-pipeline/project/, ...) took 275.1562ms
[debug]       Load.apply: load took 277.7327ms
[debug]       Load.apply: resolveProjects took 0.2684ms
[debug]       Load.apply: finalTransforms took 13.4128ms
[debug]       Load.apply: config.delegates took 0.7317ms
[debug]       Load.apply: Def.make(settings)... took 139.8063ms
[debug]       Load.apply: structureIndex took 40.1075ms
[debug]       Load.apply: mkStreams took 0.0056ms
[info] loading project definition from C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 987.0914ms
[debug]     Load.loadUnit: defsScala took 0.0066ms
[debug] [Loading] Scanning directory C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline
[debug]       Load.loadUnit: mkEval took 0.8731ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 5.3387 ms
[info] loading settings for project clickstream-data-pipeline from build.sbt ...
[debug]         Load.resolveProject(clickstream-data-pipeline) took 32.1079ms
[debug]       Load.loadTransitive: finalizeProject(Project(id clickstream-data-pipeline, base: C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline, plugins: List(<none>))) took 39.1143ms
[debug] [Loading] Done in C:\Users\DELL\Desktop\sparkAssignment\de\clickstream-data-pipeline, returning: (clickstream-data-pipeline)
[debug]     Load.loadUnit: loadedProjectsRaw took 173.9497ms
[debug]     Load.loadUnit: cleanEvalClasses took 2.9119ms
[debug]   Load.loadUnit(file:/C:/Users/DELL/Desktop/sparkAssignment/de/clickstream-data-pipeline/, ...) took 1164.7648ms
[debug] Load.apply: load took 1167.3953ms
[debug] Load.apply: resolveProjects took 0.1448ms
[debug] Load.apply: finalTransforms took 28.307ms
[debug] Load.apply: config.delegates took 0.4523ms
[debug] Load.apply: Def.make(settings)... took 147.8189ms
[debug] Load.apply: structureIndex took 46.9557ms
[debug] Load.apply: mkStreams took 0.0034ms
[info] set current project to clickstream-data-pipeline (in build file:/C:/Users/DELL/Desktop/sparkAssignment/de/clickstream-data-pipeline/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 56853 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 56853, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to clickstream-data-pipeline (in build file:/C:/Users/DELL/Desktop/sparkAssignment/de/clickstream-data-pipeline/)
[debug] > Exec(idea-shell, None, None)
